<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CaTaLiS Blog</title>
  <subtitle>Zapiski Programisty</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://catalis.github.io/"/>
  <updated>2017-05-07T14:13:41.418Z</updated>
  <id>https://catalis.github.io/</id>
  
  <author>
    <name>CaTaLiS</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Harmonogram Zadań W Javie</title>
    <link href="https://catalis.github.io/2017/05/07/Harmonogram-zadan-w-Javie/"/>
    <id>https://catalis.github.io/2017/05/07/Harmonogram-zadan-w-Javie/</id>
    <published>2017-05-07T14:13:41.426Z</published>
    <updated>2017-05-07T14:13:41.418Z</updated>
    
    <content type="html"><![CDATA[<p>W praktyce programistycznej często zdarza się, że potrzebujemy uruchomić jakieś zadanie w ściśle określonym czasie, bądź co pewien interwał czasu. W JEE z pomocą przychodzi usługa timera (najczęściej w postaci adnotacji @Schedule). Podobne mechanizmy spotkamy także w JSE. Java Concurrency API posiada prosty, wielowątkowy mechanizm, który pozwala nam na uruchamianie zadań co pewien określony przedział czasu. Poznajmy <strong>ScheduledExecutorService</strong>.</p>
<p>ScheduledExecutorService jest interfejsem dziedziczącym po ExecutorService. Warto przyjrzeć się jego 4 najważniejszym metodom:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">schedule(Callable&lt;V&gt; callable, <span class="keyword">long</span> delay, TimeUnit unit)</div></pre></td></tr></table></figure>
<ul>
<li>tworzy  i wykonuje zadanie Callable po podanym opóźnieniu</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">schedule(Runnable command, <span class="keyword">long</span> delay, TimeUnit unit)</div></pre></td></tr></table></figure>
<ul>
<li>przeciążona wersja poprzedniej metody, przyjmująca zadanie Runnable</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scheduleAtFixedRate(Runnable command, <span class="keyword">long</span> initialDelay, <span class="keyword">long</span> period, TimeUnit unit)</div></pre></td></tr></table></figure>
<ul>
<li>tworzy i wykonuje zadanie Runnable po podanym wstępnym opóźnieniu (initialDelay), po czym przekazuje to zadanie do wykonania co zadany odcinek czasu (delay), niezależnie od tego, czy poprzednie zadanie zostało wykonane</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scheduleAtFixedDelay(Runnable command, <span class="keyword">long</span> initialDelay, <span class="keyword">long</span> delay, TimeUnit unit)</div></pre></td></tr></table></figure>
<ul>
<li>metoda analogiczna do poprzedniej, z tą różnicą, że czeka na wykonanie poprzedniego zadania, po jego wykonaniu czeka zadany odcinek czasu (delay), zanim przekaże to zadanie ponownie do wykonania</li>
</ul>
<p>Aby zakończyć pracę dyspozytora możemy użyć metody shutdown() na obiekcie klasy ScheduledExecutorService bądź anulować wykonywanie zadań za pomocą metody cancel(…) obiektu klasy Future (a ściślej ScheduledFuture), zwracanego przed powyższe metody. W drugim przypadku samo anulowanie nie jest wystarczające - jeżeli nie zamkniemy ostatecznie ExecutorService za pomocą metody shutdown(), wątek będzie nadal pracował w tle, co spowoduje, że JVM nie zakończy działania! </p>
<p>Poniżej zamieszczam prosty przykładowy program, który generuje napis co 5 sekund, ze wstępnym 10-sekundowym opóźnieniem, który przerywa pracę po 60 sekundach. Dodatkowo, aby JVM zakończyła działanie, zostało dodane odpowiednie zadanie, wykonywane po 70 sekundach.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.ScheduledExecutorService;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.ScheduledFuture;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlinkLightController</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(<span class="number">1</span>);</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">blinkLightFor60Seconds</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">final</span> ScheduledFuture&lt;?&gt; lightHandle = scheduler.scheduleAtFixedRate(() -&gt; System.out.println(<span class="string">"blink!"</span>), <span class="number">10</span>, <span class="number">5</span>, SECONDS);</div><div class="line">		scheduler.schedule(() -&gt; lightHandle.cancel(<span class="keyword">true</span>), <span class="number">60</span>, SECONDS);</div><div class="line">		scheduler.schedule(() -&gt; scheduler.shutdown(), <span class="number">70</span>, SECONDS);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="keyword">new</span> BlinkLightController().blinkLightFor60Seconds();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Warto zwrócić uwagę, że zadania są wykonywane w jednym wątku (Executors.newScheduledThreadPool(1)). Oczywiście mając więcej, bardziej złożonych zadań, należy zastanowić się nad zwiększeniem liczby dostępnych wątków.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;W praktyce programistycznej często zdarza się, że potrzebujemy uruchomić jakieś zadanie w ściśle określonym czasie, bądź co pewien interw
    
    </summary>
    
    
      <category term="java" scheme="https://catalis.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Warsztat Developera - Skróty Klawiszowe Eclipse</title>
    <link href="https://catalis.github.io/2017/05/05/Warsztat-developera-skroty-klawiszowe-Eclipse/"/>
    <id>https://catalis.github.io/2017/05/05/Warsztat-developera-skroty-klawiszowe-Eclipse/</id>
    <published>2017-05-05T18:34:02.000Z</published>
    <updated>2017-05-05T18:34:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>Bez dwóch zdań każdy software developer używa do swojej codziennej pracy ulubione IDE. Jako że używanie myszy jest pass&eacute; (zwalnia proces przetwarzania naszych myśli na postać kodu źródłowego), warto nauczyć się kilku najbardziej przydatnych skrótów klawiszowych w swoim ulubinym IDE. Poniżej przedstawiam najbardziej podstawowe skróty w Eclipse.</p>
<h2 id="Wyszukiwanie"><a href="#Wyszukiwanie" class="headerlink" title="Wyszukiwanie"></a>Wyszukiwanie</h2><ul>
<li><strong>Ctrl + F</strong> - Find/Replace - wciśnięte w oknie edytora kodu źródłowego otwiera okno Find/Replace</li>
<li><strong>Ctrl + H</strong> - Search - rozbudowane narzędzie do przeszukiwania zasobów projektów. Najbardziej przydatna w codziennej pracy zakładka File Search</li>
<li><strong>Ctrl + Shift + R</strong> - Open Resource - wyszukuje zasoby projektu (najczęsciej w praktyce będą to klasy) na podstawie wprowadzonych częściowych nazw, np. szukamy klasy LightServiceBean, a wiemy tylko, że gdzieś w nazwie znajduje się słowo Light - w takim przypadku wprowadzamy *Light*.java i na liście jedną z pozycji z pewnością będzie nasza poszukiwana klasa</li>
<li><strong>Ctrl + Shift + T</strong> - Open Type</li>
</ul>
<h2 id="Formatowanie"><a href="#Formatowanie" class="headerlink" title="Formatowanie"></a>Formatowanie</h2><ul>
<li><strong>Ctrl + Shift + O</strong> - Organize Imports - porządkuje importy, m.in. usuwa nieużywane</li>
<li><strong>Ctrl + Shift + F</strong> - Format - automatycznie formatuje kod źródłowy zgodnie z przyjętymi regułami</li>
<li><strong>Ctrl + Shift + M</strong> - Add Import - pozwala na dodanie importu nieznanych w kodzie klas. Przydatny podczas statycznych importów, np. w przypadku statycznej metody Assert.assertThat(…), po naciśnięciu kombinacji, do importów statycznych zostanie dodana właśnie ta metoda, natomiast w kodzie możemy używać już tylko assertThat(…)</li>
<li><strong>Alt + up/down</strong> - Przeniesienie bieżącego wiersza do góry/na dół</li>
<li><strong>Ctrl + D</strong> - Usuwanie bieżącego wiersza</li>
<li><strong>Ctrl + /</strong> - Zakomentowanie/odkomentowanie bieżącej linii (bądź wielu linii) komentarzem liniowym <em>//</em></li>
<li><strong>Ctrl + Shift + /</strong> - Dodanie komentarza blokowego /* */</li>
<li><strong>Ctrl + Shift + \</strong> - Usunięcie komentarza blokowego </li>
<li><strong>Alt + Shift + R</strong> - Rename - zmiana nazwy klasy, pola, metody, itd. z aktualizacją referencji w miejscach użycia</li>
</ul>
<h2 id="Tworzenie"><a href="#Tworzenie" class="headerlink" title="Tworzenie"></a>Tworzenie</h2><ul>
<li><strong>Ctrl + N</strong> - New - tworzenie nowego zasobu, np. klasy, interfejsu, projektu</li>
</ul>
<h2 id="Widoki"><a href="#Widoki" class="headerlink" title="Widoki"></a>Widoki</h2><ul>
<li><strong>Alt + left/right</strong> - Przechodzenie pomiędzy ostatnio edytowanymi miejscami w kodzie</li>
</ul>
<h2 id="Inne"><a href="#Inne" class="headerlink" title="Inne"></a>Inne</h2><ul>
<li><strong>Ctrl + Spacja</strong> - Podpowiedzi - często używany, jeśli nie najczęsciej, skrót, który podczas pisania kodu podpowiada nam dalszą część, np. nazwy pól/metod klasy, słowa kluczowe, dostępne szablony dla struktur (np. switch, for, metody main)</li>
</ul>
<p>Kombinacje klawiszy skrótów są widoczne przy wybranej pozycji w menu, także aby sobie przypomnieć skrót wystarczy zajrzeć do menu. Oczywiście nie wszystkie skróty są ustawione domyślnie. Istnieje szereg zadań, które nie mają przypisanego skrótu, a są bardzo czesto używane (np. generowanie getterów i setterów). Aby dodać własny lub zmienić istniejący skrót należy z menu wybrać:<br><strong>Windows -&gt; Preferences -&gt; General -&gt; Keys</strong></p>
<p><img src="/img/add_custom_shortcut.png" alt="adding_shortcut_eclipse"></p>
<p>Dla wybranego zadania (Command) przypisujemy lub zmieniamy kombinację klawiszy (Binding).</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Bez dwóch zdań każdy software developer używa do swojej codziennej pracy ulubione IDE. Jako że używanie myszy jest pass&amp;eacute; (zwalnia 
    
    </summary>
    
    
      <category term="eclipse" scheme="https://catalis.github.io/tags/eclipse/"/>
    
  </entry>
  
</feed>
